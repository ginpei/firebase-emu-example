rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /conferences/{conferenceId} {
      allow read;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.level == 'admin'
    }
    match /conferences/{conferenceId}/attendances/{userId} {
      allow read;
      allow write: if userId == request.auth.uid;
    }
    match /conferences/{conferenceId}/attendants/{scheduleKey} {
      allow read;
      allow write: if request.resource.data.userIds.hasAll([request.auth.uid]);
    }
    match /free-notes/{noteId} {
      allow read;
      allow write: if request.auth != null;
    }
    match /notes/{noteId} {
      allow create: if request.resource.data.userId == request.auth.uid;
      allow read: if resource.data.userId == request.auth.uid;
      allow update: if resource.data.userId == request.auth.uid;
      allow delete: if resource.data.userId == request.auth.uid;
    }
    match /profiles/{userId} {
      allow create: if userId == request.auth.uid;
      allow read: if true;
      allow update: if userId == request.auth.uid;
      allow delete: if userId == request.auth.uid;
    }
    match /users/{userId} {
      allow create: if userId == request.auth.uid;
      allow read: if true;
      allow update: if userId == request.auth.uid;
      allow delete: if userId == request.auth.uid;
    }
    match /quick-yesno-questions/{questionId} {
      allow create: if request.resource.data.userId == request.auth.uid;
      allow read;
      allow update: if resource.data.userId == request.auth.uid;
      allow delete: if resource.data.userId == request.auth.uid;
      match /answers/{answerId} {
        allow create: if request.resource.data.userId == request.auth.uid;
        allow read;
      }
    }

    match /secure-notes/v1 {
      match /notes/{noteId} {
        allow read: if resource.data.public || resouce.data.ownerId == request.auth.uid;
      }

      match /users/{userId} {
        function isOwner(userId, currentUserId) {
          return userId == currentUserId;
        }

        allow read, write: if isOwner(userId, request.auth.uid);
      }
    }
  }
}
